#!/usr/bin/env python3
"""
=============================================================================
  Licensed Materials, Property of neuraldevelopment, Munich
  Project : basefunctions
  Copyright (c) by neuraldevelopment
  All rights reserved.
  Description:
  Database instance management CLI tool with dynamic registry support
 =============================================================================
"""

# -------------------------------------------------------------
# IMPORTS
# -------------------------------------------------------------
import argparse
import sys
import os
from typing import List, Dict, Any
import tabulate
import basefunctions

# -------------------------------------------------------------
# DEFINITIONS REGISTRY
# -------------------------------------------------------------

# -------------------------------------------------------------
# DEFINITIONS
# -------------------------------------------------------------
BASE_DIR = "~/.databases"
INSTANCES_DIR = f"{BASE_DIR}/instances"
TEMPLATES_DIR = f"{BASE_DIR}/templates"
TABLE_FORMAT = "fancy_grid"

# -------------------------------------------------------------
# VARIABLE DEFINITIONS
# -------------------------------------------------------------

# -------------------------------------------------------------
# CLASS / FUNCTION DEFINITIONS
# -------------------------------------------------------------


def handle_create(args) -> int:
    """Handle create command."""
    try:
        manager = basefunctions.DbManager()

        # Ensure templates are installed
        docker_manager = basefunctions.DbDockerManager()
        if not docker_manager.install_default_templates():
            print("Warning: Failed to install default templates")

        # Create Docker instance
        print(f"Creating {args.db_type} instance '{args.instance_name}'...")
        instance = manager.create_docker_instance(args.db_type, args.instance_name, args.password or "test")

        if instance:
            config = instance.get_config()
            ports = config.get("ports", {})
            db_port = ports.get("db", "unknown")
            admin_port = ports.get("admin", "unknown")

            print(f"Successfully created {args.db_type} instance '{args.instance_name}'")
            print(f"  Database port: {db_port}")
            if admin_port != "unknown":
                print(f"  Admin port: {admin_port}")
                if args.db_type != "redis":
                    print(f"  Admin URL: http://localhost:{admin_port}")
            print(f"  Password: {args.password or 'test'}")

            # Redis-specific info
            if args.db_type == "redis":
                print(f"  Redis CLI: redis-cli -p {db_port}")

            return 0
        else:
            print(f"Failed to create instance '{args.instance_name}'")
            return 1

    except Exception as e:
        print(f"Error creating instance: {str(e)}")
        return 1


def handle_start(args) -> int:
    """Handle start command."""
    try:
        manager = basefunctions.DbManager()

        # Check if starting all instances
        if args.instance_name == "all":
            return handle_start_all(manager)

        # Start single instance
        print(f"Starting instance '{args.instance_name}'...")
        success = manager.start_docker_instance(args.instance_name)

        if success:
            print(f"Instance '{args.instance_name}' started successfully")
            return 0
        else:
            print(f"Failed to start instance '{args.instance_name}'")
            return 1

    except Exception as e:
        print(f"Error starting instance: {str(e)}")
        return 1


def handle_start_all(manager: "basefunctions.DbManager") -> int:
    """Handle starting all instances."""
    try:
        docker_manager = basefunctions.DbDockerManager()

        # Get all instances
        instances = manager.list_instances()

        if not instances:
            print("No instances found to start")
            return 0

        # Get status for all instances to find stopped ones
        all_status = docker_manager.get_all_instances_status()
        stopped_instances = [name for name, status in all_status.items() if status.get("status") == "stopped"]

        if not stopped_instances:
            print("No stopped instances found")
            return 0

        print(f"Starting {len(stopped_instances)} stopped instance(s)...")

        success_count = 0
        failed_instances = []

        for instance_name in stopped_instances:
            print(f"  Starting '{instance_name}'...", end=" ")

            if manager.start_docker_instance(instance_name):
                print("✓")
                success_count += 1
            else:
                print("✗")
                failed_instances.append(instance_name)

        # Summary
        print(f"\nStarted {success_count} of {len(stopped_instances)} instances")

        if failed_instances:
            print(f"Failed to start: {', '.join(failed_instances)}")
            return 1

        return 0

    except Exception as e:
        print(f"Error starting all instances: {str(e)}")
        return 1


def handle_stop(args) -> int:
    """Handle stop command."""
    try:
        manager = basefunctions.DbManager()

        # Check if stopping all instances
        if args.instance_name == "all":
            return handle_stop_all(manager)

        # Stop single instance
        print(f"Stopping instance '{args.instance_name}'...")
        success = manager.stop_docker_instance(args.instance_name)

        if success:
            print(f"Instance '{args.instance_name}' stopped successfully")
            return 0
        else:
            print(f"Failed to stop instance '{args.instance_name}'")
            return 1

    except Exception as e:
        print(f"Error stopping instance: {str(e)}")
        return 1


def handle_stop_all(manager: "basefunctions.DbManager") -> int:
    """Handle stopping all instances."""
    try:
        docker_manager = basefunctions.DbDockerManager()

        # Get all instances
        instances = manager.list_instances()

        if not instances:
            print("No instances found to stop")
            return 0

        # Get status for all instances to find running ones
        all_status = docker_manager.get_all_instances_status()
        running_instances = [name for name, status in all_status.items() if status.get("status") == "running"]

        if not running_instances:
            print("No running instances found")
            return 0

        print(f"Stopping {len(running_instances)} running instance(s)...")

        success_count = 0
        failed_instances = []

        for instance_name in running_instances:
            print(f"  Stopping '{instance_name}'...", end=" ")

            if manager.stop_docker_instance(instance_name):
                print("✓")
                success_count += 1
            else:
                print("✗")
                failed_instances.append(instance_name)

        # Summary
        print(f"\nStopped {success_count} of {len(running_instances)} instances")

        if failed_instances:
            print(f"Failed to stop: {', '.join(failed_instances)}")
            return 1

        return 0

    except Exception as e:
        print(f"Error stopping all instances: {str(e)}")
        return 1


def handle_delete(args) -> int:
    """Handle delete command."""
    try:
        manager = basefunctions.DbManager()

        # Confirm deletion
        if not args.force:
            confirm = input(f"Are you sure you want to delete instance '{args.instance_name}'? (y/N): ")
            if confirm.lower() != "y":
                print("Deletion cancelled.")
                return 0

        print(f"Deleting instance '{args.instance_name}'...")
        success = manager.delete_docker_instance(args.instance_name)

        if success:
            print(f"Instance '{args.instance_name}' deleted successfully")
            return 0
        else:
            print(f"Failed to delete instance '{args.instance_name}'")
            return 1

    except Exception as e:
        print(f"Error deleting instance: {str(e)}")
        return 1


def handle_list(args) -> int:
    """Handle list command."""
    try:
        manager = basefunctions.DbManager()
        docker_manager = basefunctions.DbDockerManager()

        # Get all instances
        instances = manager.list_instances()

        if not instances:
            print("No database instances found.")
            return 0

        if args.names_only:
            # For completion - just print names
            for instance_name in instances:
                print(instance_name)
            return 0

        # Get status for all instances
        all_status = docker_manager.get_all_instances_status()

        # Build table data
        table_data = []
        for instance_name in instances:
            try:
                # Get instance info
                info = docker_manager.get_instance_info(instance_name)
                status_info = all_status.get(instance_name, {"status": "unknown", "error": ""})

                db_type = info.get("type", "unknown")
                ports = info.get("ports", {})
                db_port = ports.get("db", "-")
                admin_port = ports.get("admin", "-")
                status = status_info.get("status", "unknown")

                table_data.append([instance_name, db_type, db_port, admin_port, status])

            except Exception as e:
                table_data.append([instance_name, "error", "-", "-", f"error: {str(e)}"])

        # Sort table data by DB port (index 2) and then by admin port (index 3)
        # Convert ports to integers for proper numeric sorting, handling '-' case
        table_data.sort(
            key=lambda x: (int(x[2]) if x[2] != "-" else float("inf"), int(x[3]) if x[3] != "-" else float("inf"))
        )

        # Display table
        headers = ["Name", "Type", "DB Port", "Admin Port", "Status"]
        print(tabulate.tabulate(table_data, headers=headers, tablefmt=TABLE_FORMAT))
        return 0

    except Exception as e:
        print(f"Error listing instances: {str(e)}")
        return 1


def handle_status(args) -> int:
    """Handle status command."""
    try:
        docker_manager = basefunctions.DbDockerManager()

        # Get instance status
        status = docker_manager.get_instance_status(args.instance_name)
        info = docker_manager.get_instance_info(args.instance_name)

        if status.get("error"):
            print(f"Error: {status['error']}")
            return 1

        instance_status = status.get("status", "unknown")
        instance_type = info.get("type", "unknown")
        ports = info.get("ports", {})
        connection = info.get("connection", {})

        # Build table data for status information
        table_data = [
            ["Instance", args.instance_name],
            ["Type", instance_type],
            ["Status", instance_status],
        ]

        if ports:
            table_data.extend(
                [
                    ["Database Port", ports.get("db", "-")],
                    ["Admin Port", ports.get("admin", "-")],
                ]
            )

            # Type-specific connection info
            if instance_status == "running":
                if instance_type == "redis":
                    table_data.append(["Redis CLI", f"redis-cli -p {ports.get('db', 6379)}"])
                elif ports.get("admin"):
                    table_data.append(["Admin URL", f"http://localhost:{ports.get('admin')}"])

        if connection and instance_status == "running":
            table_data.extend(
                [
                    ["Host", connection.get("host", "localhost")],
                    ["User", connection.get("user", "-")],
                ]
            )

        # Show Simon integration info
        simon_script = os.path.join(
            os.path.expanduser(f"{INSTANCES_DIR}/{args.instance_name}"), "simon", "monitor_script.sh"
        )
        if os.path.exists(simon_script):
            table_data.append(["Simon Script", "Available"])

        print(tabulate.tabulate(table_data, headers=["Property", "Value"], tablefmt=TABLE_FORMAT))
        return 0

    except Exception as e:
        print(f"Error getting status: {str(e)}")
        return 1


def handle_simon(args) -> int:
    """Handle simon command."""
    try:
        docker_manager = basefunctions.DbDockerManager()

        # Get instance info
        info = docker_manager.get_instance_info(args.instance_name)

        if info.get("error"):
            print(f"Error: {info['error']}")
            return 1

        # Get instance directory path
        instance_dir = os.path.expanduser(f"{INSTANCES_DIR}/{args.instance_name}")
        simon_script = os.path.join(instance_dir, "simon", "monitor_script.sh")

        ports = info.get("ports", {})

        # Build Simon info table
        table_data = [
            ["Instance", args.instance_name],
            ["Type", info.get("type", "unknown")],
            ["Database Port", ports.get("db", "-")],
            ["Admin Port", ports.get("admin", "-")],
            ["Script Location", simon_script],
            ["Script Status", "✓ Available" if os.path.exists(simon_script) else "✗ Missing"],
        ]

        print("Simon Integration Information:")
        print(tabulate.tabulate(table_data, headers=["Property", "Value"], tablefmt=TABLE_FORMAT))

        if not os.path.exists(simon_script):
            print("\n✗ Script not found - recreate instance to generate")
            return 1

        print(f"\nHow to import into Simon:")
        print(f"  1. Open Simon")
        print(f"  2. Create New Test → Script Service")
        print(f"  3. Click 'Open Script...' and select:")
        print(f"     {simon_script}")
        print(f"  4. Variables will be automatically set:")
        print(f"     DB_NAME = {args.instance_name}")
        print(f"     DB_PORT = {ports.get('db', 'unknown')}")
        print(f"  5. Save and start monitoring!")

        return 0

    except Exception as e:
        print(f"Error getting Simon info: {str(e)}")
        return 1


def handle_redis(args) -> int:
    """Handle redis operations."""
    try:
        docker_manager = basefunctions.DbDockerManager()

        # Get instance info
        info = docker_manager.get_instance_info(args.instance_name)

        if info.get("error"):
            print(f"Error: {info['error']}")
            return 1

        if info.get("type") != "redis":
            print(f"Error: Instance '{args.instance_name}' is not a Redis instance")
            return 1

        # Check if instance is running
        status = docker_manager.get_instance_status(args.instance_name)
        if status.get("status") != "running":
            print(f"Error: Instance '{args.instance_name}' is not running")
            return 1

        ports = info.get("ports", {})
        redis_port = ports.get("db", 6379)

        # Execute Redis commands via docker exec
        container_name = f"{args.instance_name}_redis"

        if args.action == "flush":
            print(f"Flushing Redis instance '{args.instance_name}'...")
            result = os.system(f"docker exec {container_name} redis-cli FLUSHALL")
            if result == 0:
                print("✓ Redis cache flushed successfully")
                return 0
            else:
                print("✗ Failed to flush Redis cache")
                return 1

        elif args.action == "stats":
            print(f"Redis Statistics for '{args.instance_name}':")
            result = os.system(f"docker exec {container_name} redis-cli INFO stats")
            return 0 if result == 0 else 1

        elif args.action == "info":
            print(f"Redis Info for '{args.instance_name}':")
            result = os.system(f"docker exec {container_name} redis-cli INFO")
            return 0 if result == 0 else 1

        elif args.action == "keys":
            print(f"Redis Keys for '{args.instance_name}':")
            result = os.system(f"docker exec {container_name} redis-cli KEYS '*'")
            return 0 if result == 0 else 1

        else:
            print(f"Unknown Redis action: {args.action}")
            return 1

    except Exception as e:
        print(f"Error executing Redis operation: {str(e)}")
        return 1


def handle_templates(args) -> int:
    """Handle templates command."""
    try:
        docker_manager = basefunctions.DbDockerManager()

        if args.action == "install":
            print("Installing default templates...")
            success = docker_manager.install_default_templates()
            if success:
                print("Templates installed successfully")
                return 0
            else:
                print("Failed to install templates")
                return 1

        elif args.action == "check":
            # Get supported types from registry
            registry = basefunctions.DbRegistry()
            supported_types = registry.get_supported_types()

            # Check if templates exist
            template_base = os.path.expanduser(TEMPLATES_DIR)

            table_data = []
            for db_type in supported_types:
                template_file = os.path.join(template_base, "docker", db_type, "docker-compose.yml.j2")
                status = "✓ Installed" if os.path.exists(template_file) else "✗ Missing"
                table_data.append([db_type, status])

            print("Template Status:")
            print(tabulate.tabulate(table_data, headers=["Database Type", "Status"], tablefmt=TABLE_FORMAT))
            return 0

    except Exception as e:
        print(f"Error with templates: {str(e)}")
        return 1


def setup_argument_parser() -> argparse.ArgumentParser:
    """Setup and return the argument parser."""
    parser = argparse.ArgumentParser(
        description="Database Instance Manager with Dynamic Registry Support",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  dbadmin create postgres mydb --password secret123
  dbadmin create redis cache_server --password mypass
  dbadmin start mydb
  dbadmin start all  
  dbadmin list
  dbadmin status mydb
  dbadmin redis flush cache_server
  dbadmin redis stats cache_server
  dbadmin stop mydb
  dbadmin stop all
  dbadmin delete mydb --force
        """,
    )

    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # Get supported types from registry
    try:
        registry = basefunctions.DbRegistry()
        supported_types = registry.get_supported_types()
    except:
        # Fallback if registry not available
        supported_types = ["postgres", "mysql", "sqlite3", "redis"]

    # Create command
    create_parser = subparsers.add_parser("create", help="Create new database instance")
    create_parser.add_argument("db_type", choices=supported_types, help="Database type to create")
    create_parser.add_argument("instance_name", help="Name for the new instance")
    create_parser.add_argument("--password", help="Database password (default: test)")

    # Start command
    start_parser = subparsers.add_parser("start", help="Start database instance")
    start_parser.add_argument(
        "instance_name", help="Name of instance to start (use 'all' to start all stopped instances)"
    )

    # Stop command
    stop_parser = subparsers.add_parser("stop", help="Stop database instance")
    stop_parser.add_argument(
        "instance_name", help="Name of instance to stop (use 'all' to stop all running instances)"
    )

    # Delete command
    delete_parser = subparsers.add_parser("delete", help="Delete database instance")
    delete_parser.add_argument("instance_name", help="Name of instance to delete")
    delete_parser.add_argument("--force", action="store_true", help="Skip confirmation prompt")

    # List command
    list_parser = subparsers.add_parser("list", help="List all database instances")
    list_parser.add_argument("--names-only", action="store_true", help="Output only instance names (for completion)")

    # Status command
    status_parser = subparsers.add_parser("status", help="Show instance status")
    status_parser.add_argument("instance_name", help="Name of instance to check")

    # Simon command
    simon_parser = subparsers.add_parser("simon", help="Show Simon integration info")
    simon_parser.add_argument("instance_name", help="Name of instance for Simon integration")

    # Redis command
    redis_parser = subparsers.add_parser("redis", help="Redis operations and management")
    redis_parser.add_argument("action", choices=["flush", "stats", "info", "keys"], help="Redis operation")
    redis_parser.add_argument("instance_name", help="Name of Redis instance")

    # Templates command
    templates_parser = subparsers.add_parser("templates", help="Manage templates")
    templates_parser.add_argument("action", choices=["install", "check"], help="Template action")

    return parser


def main() -> int:
    """Main entry point."""
    # Disable all logging for clean CLI output
    import logging

    logging.disable(logging.CRITICAL)

    parser = setup_argument_parser()

    # If no arguments provided, show help
    if len(sys.argv) == 1:
        parser.print_help()
        return 1

    args = parser.parse_args()

    # Dispatch to appropriate handler
    handlers = {
        "create": handle_create,
        "start": handle_start,
        "stop": handle_stop,
        "delete": handle_delete,
        "list": handle_list,
        "status": handle_status,
        "simon": handle_simon,
        "redis": handle_redis,
        "templates": handle_templates,
    }

    handler = handlers.get(args.command)
    if handler:
        return handler(args)
    else:
        print(f"Unknown command: {args.command}")
        parser.print_help()
        return 1


if __name__ == "__main__":
    sys.exit(main())
