#compdef dbadmin
# =============================================================================
# Zsh completion for dbadmin database instance manager
# File: dbadmin_completions
# Location: /Users/neutro2/.config/zsh/dbadmin_completions
# =============================================================================
_dbadmin() {
   local curcontext="$curcontext" state line
   local -A opt_args
   
   _arguments -C \
       '(-h --help)'{-h,--help}'[Show help message]' \
       '1: :_dbadmin_commands' \
       '*::arg:->args' \
       && ret=0
   case $state in
       args)
           case $line[1] in
               create)
                   _arguments \
                       '1:database type:(postgres mysql sqlite3 redis)' \
                       '2:instance name:' \
                       '--password[Database password]:password:' \
                       '(-h --help)'{-h,--help}'[Show help message]' \
                       && ret=0
                   ;;
               start|stop)
                   _arguments \
                       '1:instance name:_dbadmin_instances_or_all' \
                       '(-h --help)'{-h,--help}'[Show help message]' \
                       && ret=0
                   ;;
               status|simon)
                   _arguments \
                       '1:instance name:_dbadmin_instances' \
                       '(-h --help)'{-h,--help}'[Show help message]' \
                       && ret=0
                   ;;
               delete)
                   _arguments \
                       '1:instance name:_dbadmin_instances' \
                       '--force[Skip confirmation]' \
                       '(-h --help)'{-h,--help}'[Show help message]' \
                       && ret=0
                   ;;
               list)
                   _arguments \
                       '--names-only[Output only names]' \
                       '(-h --help)'{-h,--help}'[Show help message]' \
                       && ret=0
                   ;;
               templates)
                   _arguments \
                       '1:action:(install check)' \
                       '(-h --help)'{-h,--help}'[Show help message]' \
                       && ret=0
                   ;;
               redis)
                   _arguments \
                       '1:action:(flush stats info keys)' \
                       '2:instance name:_dbadmin_redis_instances' \
                       '(-h --help)'{-h,--help}'[Show help message]' \
                       && ret=0
                   ;;
           esac
           ;;
   esac
   
   return ret
}

_dbadmin_commands() {
   local -a commands
   commands=(
       'create:Create new database instance'
       'start:Start database instance'
       'stop:Stop database instance'
       'delete:Delete database instance'
       'list:List all database instances'
       'status:Show instance status'
       'simon:Show Simon integration info'
       'templates:Manage templates'
       'redis:Redis operations and management'
   )
   _describe 'commands' commands
}

_dbadmin_instances() {
   local -a instances
   local instance_list
   
   # Get instance names from dbadmin list --names-only
   instance_list=$(dbadmin list --names-only 2>/dev/null)
   
   if [[ $? -eq 0 && -n "$instance_list" ]]; then
       # Convert newline-separated list to array
       instances=(${(f)instance_list})
       _describe 'instances' instances
   else
       # Fallback: no instances or command failed
       _message 'no instances found'
   fi
}

_dbadmin_redis_instances() {
   local -a instances
   local instance_list
   
   # Get only Redis instances (filter by type)
   instance_list=$(dbadmin list 2>/dev/null | grep "redis" | awk '{print $1}' 2>/dev/null)
   
   if [[ $? -eq 0 && -n "$instance_list" ]]; then
       instances=(${(f)instance_list})
       _describe 'redis instances' instances
   else
       _message 'no redis instances found'
   fi
}

_dbadmin_instances_or_all() {
   local -a options
   local instance_list
   
   # Add "all" option
   options=('all:All instances')
   
   # Get instance names from dbadmin list --names-only
   instance_list=$(dbadmin list --names-only 2>/dev/null)
   
   if [[ $? -eq 0 && -n "$instance_list" ]]; then
       # Add individual instances
       local -a instances
       instances=(${(f)instance_list})
       options+=("${instances[@]}")
   fi
   
   _describe 'instances or all' options
}

_dbadmin "$@"